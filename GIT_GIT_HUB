############################
##      GIT & GIT HUB      ##
#############################

Isso é o chamado controle de versão, pois se temos diferentes versões do código precisaremos de um sistema que controle essas versões. 
E é isso que o Git fará para nós. 
Este não é o único sistema de controle de versão que existe. Outras alternativas são:

    *CVS
    *SVN
    *Mercurial
    *GIT

-Os sistemas de controle de versões, podem ajudar o nosso fluxo de desenvolvimento
    *Nos ajudam a manter um histórico de alterações;
    *Nos ajudam a ter controle sobre cada alteração no código;
    *Nos ajudam para que uma alteração de determinada pessoa não influencie na alteração realizada por outra;
    *Etc.
-O que é o Git e como instalá-lo
    O Git é o mais utilizado entre eles atualmente por conta de algumas características vantajosas, como permitir uma cópia do projeto, um repositório do projeto em sua máquina, para que se possa trabalhar em cima dela e então enviá-lo para outro repositório, o que se denomina repositórios distribuídos.
    Isso permite o trabalho de modo offline, antes da comunicação com outro servidor para que o envio de versões, e assim por diante. Existem várias outras diferenças entre estas alternativas, e você as entenderá melhor no decorrer do curso.
    #git --version (verifica se j[a existe git instalado e qual versão)
    # apt-get install git

-Que, com o comando git init, nós conseguimos criar um repositório Git(TrilhaJavaConta);
    #git init (comando executado dentro do diretorio que queremos ter o controle, ou seja, criarmos um repositório)

-Como analisar o estado do nosso repositório através do comando git status.
    #git status (Um comando que mostra o estado do nosso repositório, ou seja, quais arquivos foram alterados)

============================================================

Antes de iniciarmos as alterações pelo Git, temos que configurar o usuário do GIT, esse para comando para cada projeto;
#git config --local user.name "Seu nome aqui"
#git config --local user.email "seu@email.aqui"

O comando para todo a maquina se usa o comando "git config --global user.name "Marcelo""
#git config --global user.name "Marcelo Bistaffa"
#git config --global user.email "marcelobistaffa@gmail.com"

Para todos

1- Comando "git add", com esse comando está adicionando os arquivos para serem monitorados pelo git.
#git add index.html (esse arquivo do diretorio será monitorado)
#git add .          (todos os arquivos do diretorio serão monitorados)

2-O comando "git commit", salva as alterações, e o que poderemos entender como sendo um check point para indicar que houve mudança, seria o commit, que precisa ter modificações, que já adicionamos, mas também precisa ter uma mensagem, o que criaremos agora.
O parâmetro "-m" serve para colocarmos um comentário no commit.
#git commit -m "Commit realizado para acrescentar mais uma linha" 

3-O comando "git status", ao executar o comando git status, recebemos algumas informações que talvez não estejam tão claras, principalmente quando nos deparamos com termos como HEAD, working tree, index, etc.
 #git status   
    *HEAD: Estado atual do nosso código, ou seja, onde o Git nos colocou
    *Working tree: Local onde os arquivos realmente estão sendo armazenados e editados
    *index: Local onde o Git armazena o que será commitado, ou seja, o local entre a working tree e o repositório Git em si.

4-Alternativa para verificar os historicos dos commits se usa o comando "git log". Execute git log --help e veja algumas das opções possíveis.
# git log
Author: Bistaffa <marcelobistaffa@gmail.com>
Date:   Fri Apr 10 18:00:25 2020 -0300
    Primeiro commit para iniciar os controles no git

Comando para verificar todos os commits, com o resultado em uma linha por commit. Contendo apenas as inicias do commit.
#git log --oneline
dc42b74 (HEAD -> master) Primeiro commit para iniciar os controles no git

4.1-Comando para ter mais detalhes do commit. O formato em que elas são exibidas conta com a versão anterior em vermelho, e a versão modificada logo abaixo, em verde.
#git log -p

4.2-Comando git log --pretty="format:%H", comando que nos traz apenas o hash.
# git log --pretty="format:%H"
dc42b7416d8aff186e7f2d675719545ac08153ef

4.3-Comando git log --pretty="format:%h %s", traz o hash resumido seguido pela mensagem do commit. 
Assim, podemos gerar o histórico da nossa aplicação em formatos personalizados.
#git log --pretty="format:%h %s"
dc42b74 Primeiro commit para iniciar os controles no git

OBS: Para saber mais sobre parâmetros do comando git log consultar o site https://devhints.io/git-log .
Assim todos os commits executados neste repositório serão atribuídos à pessoa com nome Nome da pessoa. 
Para mais detalhes e outras configurações possíveis (até algumas mais avançadas), você pode conferir este link: https://git-scm.com/book/en/v2/Customizing-Git-Git-Configuration.

5-Existe um arquivo especial do Git, chamado ".gitignore", e todas as linhas que estiverem nele serão lidos e ignorados pelo Git. 
Se temos um arquivo denominado ide-config que queremos que seja ignorado, por exemplo, basta o incluirmos em ".gitignore", digitando ide-config simplesmente. 
Da mesma forma, se tivéssemos uma pasta ide, incluiríamos ide/, em uma nova linha.
#git add .gitignore
#git commit -m "Adicionando .gitignore"

O QUE APRENDEMOS:

*Que um commit é a forma de salvar um estado ou versão do nosso código;
*Como adicionar arquivos para serem commitados com git add;
*Como commitar arquivos, utilizando o comando git commit;
*Como verificar o histórico de commits, através do git log e algumas de suas opções:
    #git log --oneline
    #git log -p
    #git log --pretty="parametros de formatação"
*Como fazer o Git não monitorar arquivos, através do .gitignore
*Que não devemos realizar commit, ou seja, salvar um estado, da nossa aplicação que não esteja funcionando.

=================================================================================================
=====================                REPOSITORIO REMOTOS              ===========================
=================================================================================================

E então acessaremos esta pasta, com cd servidor, dentro da qual rodaremos git init. 
Como este servidor será um repositório do Git que somente armazenará as alterações, ou seja, não o 
    acessaremos para editar arquivos, por exemplo, usaremos git init --bare, cujo parâmetro indica que este repositório é puro, 
    que contém apenas as alterações dos arquivos, e não uma cópia física de cada um dos arquivos.
#mkdir servidor
#cd servidor
#git init --bare

Isso nos traz algumas facilidades e permite que adicionemos este repositório remotamente em outro. 
Após a criação do repositório, o Git nos fornece o caminho para ele, que serve como nosso servidor. 
Copiaremos o caminho, no caso /home/bistaffa/Documentos/Git_Linux/servidor, e voltaremos à pasta "marcelo", onde se encontra nosso projeto, por meio do comando cd ../marcelo.
#cd ../marcelo

Executaremos git status para nos certificarmos de que estamos no repositório correto.
#git status

Se executarmos o comando git remote, teoricamente, nada acontece. Mas na verdade, todos os repositórios remotos que o repositório local conhece são listados, que até o momento é nenhum. 
Portanto, adicionaremos um, com "git remote add nome_repositorio "/home/bistaffa/Documentos/Git_Linux/servidor", e para quantos repositórios remotos quisermos, poderemos dar algum nome, no caso, local, 
    também incluiremos um caminho, que poderá ser uma URL de um servidor pela internet, um endereço na rede, inclusive de outro computador, qualquer endereço válido para um repositório Git. 
Neste caso, será uma pasta no próprio servidor.
#git remote
#git remote add local /home/bistaffa/Documentos/Git_Linux/servidor

Depois que pressionamos "Enter", aparentemente nada acontece, e se usarmos o comando git remote, o retorno será local. 
Se quisermos garantir que o endereço esteja correto, poderemos executar git remote -v, que faz com que o endereço de local seja exibido. Além disso, é indicado que os dados deste caminho serão buscados (fetch), e enviados para este mesmo caminho (push).
#git remote
#git remote -v

Voltaremos à pasta "Git_Linux" por meio de cd .., e criaremos uma pasta para o "murilo", com "mkdir murilo". 
Acessaremos a pasta com cd ana, e ela então precisará clonar o repositório, é assim que chamamos quando queremos trazer todos os dados de um repositório remoto para o nosso repositório local pela primeira vez.
#cd /home/bistaffa/Documentos/Git_Linux
#mkdir murilo
#cd murilo

Sendo assim, executaremos "git clone /home/bistaffa/Documentos/Git_Linux/servidor", para que sejam trazidos os dados do repositório localizado neste endereço. 
Isso fará com que dentro da pasta "murilo" seja criada uma pasta chamada "servidor". 
Porém, não é o que queremos; queremos que a pasta seja "projeto", por exemplo, e para isso executaremos "git clone /home/bistaffa/Documentos/Git_Linux/servidor nome_projeto.
#git clone /home/bistaffa/Documentos/Git_Linux/servidor (nao colocar nome do projeo clonado sera criado como servidor)
#git clone /home/bistaffa/Documentos/Git_Linux/servidor projeto

=================================================================================================
=====================             SINCRONIZANDO OS DADOS              ===========================
=================================================================================================

No Git Bash, digitaremos cd ../marcelo/ e, depois, "git remote" para confirmarmos a existência de local — mas como será que incluímos o repositório nele? 
Empurraremos as modificações, portanto usaremos o comando git push, que não é o suficiente por si só, uma vez que não estamos sendo explícitos.
#cd ../marcelo
#git remote

O comando será "git push local master", e assim, serão enviados todos os dados por todos os códigos e alterações feitas até então para nosso repositório que chamamos de "local", dentro de "servidor". 
Após pressionarmos "Enter", teremos a mensagem de que uma nova branch (ramo) foi criada em "servidor", chamada master.
#git push local master

OBS:Erro ao fazer push do local para o master. Necessário executar o comando dentro do repositorio remoto(servidor) "git config --bool core.bare true""

Vamos nos logar como murilo, digitando cd ../murilo/projeto/, e executar ls para verificar se o arquivo HTML está contido ali, o que não acontece, 
    pois o usuário "marcelo" enviou os dados para o servidor, mas o "murilo" não os trouxe para o seu próprio repositório. 
Para isso, executaremos o comando "git pull", mas se digitarmos git remote, teremos origin. 
O que é isso? De onde ele vem?
Iremos renomeá-la de local também, por meio de "git remote rename nome_original nome_renomeado". 
Assim, manteremos a paridade com a nomenclatura do Vinicius. 
Em seguida, executaremos "git pull local master" para trazermos os dados. 
Ainda falaremos melhor sobre branches, no entanto sabemos que estamos trabalhando com master por ora. 
Desta vez, com ls teremos index.html listado, como gostaríamos.
#cd ../murilo/projeto
#git remote
#git remote rename origin local
#git pull local master

Assim, conseguimos começar a sincronizar os dados do marcelo e do murilo;
    se ela atualizar algo em alguma parte do código index.html, uma vez estando logados como murilo, 
    utilizaremos "git status", teremos o aviso de que a modificação foi realizada, executaremos git add index.html, 
    seguido por git commit -m "Renomeando curso de Integração Contínua".
#nano index.html (Alterado o nome do curso Integracao Continua:Ganhando produtividade e agilidade)
#git status (verifica as alterações)
#git add index.html
#git commit -m "Renomeando curso de Integração Contínua"
#git push local master

Agora iremos logar como marcelo para verificar as alterações
#cd ../../marcelo
#git status
#git pull local master (puxando as alterações que o murilo subiu)

******O que são repositórios remotos;
******Como criar um repositório Git sem uma cópia dos arquivos (com --bare) para ser utilizado como servidor;
******Como adicionar links para os repositórios remotos, com o comando git remote add;
******Como baixar um repositório pela primeira vez, clonando-o com o comando git clone;
******Como trazer e enviar as nossas alterações para um repositório remoto, com git push;
******Como atualizar o nosso repositório com os dados no repositório remoto, utilizando git pull;
******O que é e para que serve o GitHub;
******Como criar um repositório no GitHub;
******Como adicionar um repositório do GitHub como repositório remoto.

=================================================================================================
=====================                     BRANCHES                    ===========================
=================================================================================================
Branches ("ramos") são utilizados para desenvolver funcionalidades isoladas umas das outras. 
A branch master é a branch "padrão" quando você cria um repositório.
Com o comando git branch, vamos verificar em qual branch estamos apontando, no caso para o branch master.
O comando "git branch nome_branch" serve para criar um novo branch
#git branch titulo

O comando para trocar de branch é usado o comando "git checkout nome_branch"
#git checkout titulo

Criando um novo branch para o murilo com o atalho.
Usando o comando "git checkout -b nome_branch", já cria um novo branch e já faz o checkout direto.
#git checkout -b lista

=================================================================================================
=====================                UNINDO CÓDIGOS                   ===========================
=================================================================================================
Utilizaremos git checkout master, e depois git commit -m "Corrigindo bug". 
Sendo assim, o branch master não contém as alterações referentes a titulo. 
Após a alteração no projeto, faremos a adição e o commit normalmente, no Git Bash, e por fim executaremos git merge titulo, como visto anteriormente. 
Quando dermos um "Enter", será criado um commit de merge, ou seja, de junção de duas branches. 
#git checkout master
#gir add .
#git commit -m "Corrigindo bug"
#git checkout master
#git merge titulo

=================================================================================================
=====================               ATUALIZANDO BRANCH                ===========================
=================================================================================================
Vamos fazer uma alteração na branch titulo, com git checkout titulo, e no VS Code alteraremos a primeira letra de "Cursos" para que fique em maiúscula. 
Adicionaremos o arquivo e o commitaremos, e depois iremos à branch master para trazermos os commits de titulo para ela, por meio de git rebase titulo.
Ou seja, o rebase atualiza a branch, mantendo o trabalho dela como sendo o último, para que não se gere este tipo de confusão. 
Com isso, temos as correções realizadas tanto no título quanto na lista, e poderemos fazer o git push local master, logados como marcelo. 
Tudo está atualizado! Podemos, então, nos logar como murilo, usar git checkout master e git pull local master para atualizar os dados também.
#git checkout titulo
#git add index.html
#git commit -m "Adicionado letra maiuscula no curso"
#git rebase titulo

#cd ../murilo/projeto
#git checkout master
#git pull local master

=================================================================================================
=====================               RESOLVENDO CONFLITOS              ===========================
=================================================================================================
No caso, tivemos uma alteração de marcelo e murilo no mesmo arquivo, com o comando merge ou rebase, 
    ocorreu um conflito, onde é identificado entre as linhas <<<<<<< HEAD (Current Change) e =======, 
    estão os dados do commit atual, na master. E entre as linhas ======= e >>>>>>> titulo (Incoming Change), 
    são os dados que estamos tentando trazer da branch titulo, dentro do arquivo alterado.
Executaremos git status, e teremos a informação de que houve uma modificação em dois lugares, na branch atual e aquela que estamos tentando unificar. 
Feita a correção, simplesmente utilizaremos git add index.html, e então git commit para que o commit de merge seja realizado. 
Desta vez, se executarmos git log --graph, teremos a indicação do merge de titulo. 
Em seguida, poderemos usar git push local master.
Após corrigido o conflito, segue os passos:
#git add .
#git commit -m "Correção dos conflitos do merge"
#git log --graph
#git push local master

******Que uma branch (ou ramo) é uma linha de commits separada, e que pode ser utilizada para desenvolver funcionalidades independentes;
******Que com branches separados, podemos evitar que o código de uma funcionalidade interfira em outra;
******Como trazer o trabalho realizado em uma branch para outra branch, como por exemplo, o master, através do comando git merge;
******Que o git merge gera um novo commit, informando que houve uma mescla entre duas branches;
******Como trazer os commits de uma branch para outra, com o git rebase
******Que o git rebase não gera um commit de merge, simplificando o nosso log;
******Como os conflitos são apresentados pelo Git;
******Como resolver os conflitos e manter apenas as alterações desejadas com o Git.

=================================================================================================
=====================           DESFAZENDO ALTERAÇÕES NO GIT          ===========================
=================================================================================================
Existem 3 estagios de alterações para serem revertidas.
1-O arquivo foi modificado mas ainda nao foi adicionado com o comando git add nome_arquivo. 
Desfazendo a alterações, com o comando git checkout -- nome_arquivo:
#git status
#git checkout -- index.html

2-O arquivo foi modificado e foi realizado o comando git add nome_arquivo. 
Desfazendo a alterações, com os comandos git reset HEAD e git checkout -- nome_arquivo:
#git status
#git add index.html
#git reset HEAD
#git checkout -- index.html

3-O arquivo foi modificado e foi realizado o comando git add nome_arquivo e comitado git commit nome_arquivo
Será necessário usar o comando git log para pegar id do commit para reverter.
Desfazendo a alterações, com os comandos git reset id_commit:
#git status
#git add index.html
#git commit index.html
#git log
#git revert 5e5e94bf7c28e53c6bde887b148351672804d0db

=================================================================================================
=====================              GUARDANDO PARA DEPOIS              ===========================
=================================================================================================
No Git, existe um conceito denominado Stash, e por meio de git stash conseguimos salvar todas as alterações, 
    no caso, somente o arquivo index.html, para um local temporário, 
    sem necessidade de um commit ou de se gerar um commit para isto.
#git stash 

Após executarmos o comando "git stash", com o comando "git stash list", podemos visualizar uma lista de tudo que foi salvo nessas condições.
#git stash list

Iremos alterar o arquivo index.html só que em outro ponto, e agora iremos realizar o commit.
#git add index.html
#git commit -m "Alterado o nome do curso de kotlin""

Feito isto, queremos voltar a trabalhar com as alterações no curso de Ansible. 
No VS Code, teremos que as alterações em relação ao título do Kubernetes já foram realizados, porém os de Ansible, não. 
Queremos trazer os dados armazenados pelo git stash ao diretório de trabalho. 
Há duas opções: executarmos git stash list, e em seguida passarmos o número da stash em git stash apply <numero_da_stash>, aplicaremos estas modificações, porém elas continuarão na stash. 
Para a remoção, poderemos usar git stash drop.
#git stash list
#git stash apply 0
#git stash drop

Podemos usar o comando git stash pop, no caso esse comando já aplicará e removerá da stash.
#git stash pop
#git add index.html
#git commit -m "Alterado o nomeod do curso de Kubernetes"
#git push local master

O comando git stash é muito util quando precisamos para certa codificação para atuar em outra.

=================================================================================================
=====================                VIAJANDO NO TEMPO                ===========================
=================================================================================================
O comando git log --oneline, por exemplo, nos traz os hashs com apenas os sete primeiros caracteres, o suficiente para identificá-los de forma única.
No caso, queremos navegar ao commit de hash ea539b3. 
Já conversamos que o comando git checkout muda o estado da aplicação, seja desfazendo alterações, navegando entre branches ou commits. 
Assim, é possível utilizarmos git checkout ea539b3, e com isso a mensagem que se exibe indica que estamos em um estado de cabeça (HEAD) desanexado (detached) do controle de versões.
#git log --oneline
#git checkout ea539b3

Se realizarmos qualquer alteração, incluindo outro git commit, o HEAD se locomoverá para um lugar sem nome, uma branch inexistente. 
E se fizermos git checkout master nunca mais conseguiremos acessar o commit em que estávamos anteriormente, que fica desanexado das linhas de desenvolvimento.
#git commit -m "Realizei alteração que vai ser perder"

Se quisermos fazer alterações que sejam salvas a partir daqui, será necessário criar uma branch antes, a ser modificado a partir deste commit. Usaremos git checkout -b novo-branch, 
    de forma a não estarmos mais desassociados da linha de desenvolvimento, o que se confirma se realizarmos um novo commit.

O que foi visto:
******Que o Git pode nos ajudar a desfazer alterações que não vamos utilizar;
******Que, para desfazer uma alteração antes de adicioná-la para commit (com git add), podemos utilizar o comando git checkout -- <arquivos>;
******Que, para desfazer uma alteração após adicioná-la para commit, antes precisamos executar o git reset HEAD <arquivos> e depois podemos desfazê-las com git checkout -- <arquivos>;
******Que, para revertermos as alterações realizadas em um commit, o comando git revert pode ser a solução;
******Que o comando git revert gera um novo commit informando que alterações foram desfeitas;
******Que, para guardar um trabalho para retomá-lo posteriormente, podemos utilizar o git stash;
******Que, para visualizar quais alterações estão na stash, podemos utilizar o comando git stash list;
******Que, com o comando git stash apply <numero>, podemos aplicar uma alteração específica da stash;
******Que o comando git stash drop <numero> remove determinado item da stash;
******Que o comando git stash pop aplica e remove a última alteração que foi adicionada na stash;
******Que o git checkout serve para deixar a cópia do código da nossa aplicação no estado que desejarmos:
            git checkout <branch> deixa o código no estado de uma branch com o nome <branch>;
            git checkout <hash> deixa o código no estado do commit com o hash <hash>.
